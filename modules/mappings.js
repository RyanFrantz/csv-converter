/* Map Workday fields to Employee Navigator fields.
 * Because the keys in a JS map are ordered, we can rely on this data
 * structure to enforce aligning the input and output values according to
 * some import specification.
 * It also helps folks reading the code clearly discern the source and target
 * fields.
 * NOTE: We're not interested in all the original Workday fields so those
 * fields are not defined here.
 */
const mappings = new Map();
//Ex. mappings.set("Workday Field", "Employee Navigator Field");
mappings.set("Employee_SSN", "Employee SSN");
mappings.set("First_Name", "First Name");
mappings.set("Middle_Name", "Middle Name");
mappings.set("Last_Name", "Last Name");
mappings.set("Suffix", "Suffix");
mappings.set("Gender", "Sex");
mappings.set("DOB", "Date of Birth");
mappings.set("Address_1", "Address 1");
mappings.set("Address_2", "Address 2");
mappings.set("City", "City");
mappings.set("State", "State");
mappings.set("Zip_Code", "Zip Code");
mappings.set("Preferred_Phone_Number", "Phone Number");
mappings.set("Employee_Work_Email_Address", "Work Email");
mappings.set("Hire_Date", "Hire Date");
mappings.set("Termination_Date", "Termination Date");
mappings.set("Level_1", "Division");
mappings.set("Annual_Salary", "Annual Base Salary");
mappings.set("Job_Title_Occupation",  "Job Title");
mappings.set("Level_2", "Class");
mappings.set("Salary_EFF_Date", "Salary Effective Date");
mappings.set("ABB_ID", "Payroll ID");
mappings.set("CF EE Termination voluntary involuntary indicator", "Termination Reason");

// There may be some hard-coded values we need to define for fields where no
// source currently exists.
const hardCodedMap = new Map();
hardCodedMap.set('Payroll Group', '26');

// Return hard-coded values.
const hardCodedValues = () => {
  return hardCodedMap.values();
}

// Return an array of the source fields we need to look for.
const sourceFields = () => {
  return [...mappings.keys()];
};

// Return an array of headers expected in the target file.
const targetFields = () => {
  const allFields = [...mappings.values(), ...hardCodedMap.keys()];
  return allFields;
};

// Given an object that represents a row of data, extract the required values,
// based on source field, in the order we plan to generate the target file.
const convertRow = (row) => {
  const mappedData = [];
  for (const srcField of sourceFields()) {
    mappedData.push(row[srcField]); // TODO: Handle undefined values.
  }
  const finalData = [...mappedData, ...hardCodedValues()];
  return finalData;
};

// Given an array of objects (generated by Papa.parse) representing CSV rows,
// generate the output expected for the target file.
const mapToTarget = (data) => {
  const allFinalMappedData = data.map(d => convertRow(d));
  return allFinalMappedData;
};

export { mapToTarget, targetFields };
